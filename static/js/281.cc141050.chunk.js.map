{"version":3,"file":"static/js/281.cc141050.chunk.js","mappings":"mPAKO,SAASA,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAChDC,SAPiB,SAACC,EAAD,GAA8B,IAAjBC,EAAgB,EAAhBA,UAChCR,GAASS,EAAAA,EAAAA,IAASF,IAClBC,GACD,EAKGE,iBAAkBC,EAAAA,GAHpB,UAKE,UAAC,KAAD,CAAMC,MAAO,CAAEC,QAAS,OAAQC,cAAe,UAA/C,WACE,yCAEE,SAAC,KAAD,CAAOC,KAAK,OAAOZ,KAAK,aAE1B,SAAC,KAAD,CAAcA,KAAK,OAAOa,UAAU,OACpC,sCAEE,SAAC,KAAD,CAAOD,KAAK,QAAQZ,KAAK,cAE3B,SAAC,KAAD,CAAcA,KAAK,QAAQa,UAAU,OACrC,yCAEE,SAAC,KAAD,CAAOD,KAAK,WAAWZ,KAAK,iBAE9B,SAAC,KAAD,CAAcA,KAAK,WAAWa,UAAU,OACxC,mBAAQD,KAAK,SAASH,MAAO,CAAEK,OAAQ,UAAvC,yBAMP,C,cCpCc,SAASC,IACtB,OACE,4BACE,SAAC,KAAD,WACE,0CAEF,SAACnB,EAAD,KACA,qDACA,SAAC,KAAD,CAAMoB,GAAG,SAAT,sBAGL,C,sHCfYC,EACL,CACJA,MAAO,4HACPC,aACE,+IAJOD,EAMH,CACNA,MACE,qFACFC,aACE,gGCPOC,EAAgBC,EAAAA,KAAaC,MAAM,CAC9CrB,KAAMoB,EAAAA,KAEHE,IAAI,EAAG,+BACPC,IAAI,GAAI,YACRC,OACAC,QAAQR,EAAWA,MAAOA,EAAWC,cACrCQ,SAAS,YACZC,OAAQP,EAAAA,KAELE,IAAI,EAAG,+BACPC,IAAI,GAAI,YACRC,OACAC,QAAQR,EAAaA,MAAOA,EAAaC,cACzCQ,SAAS,cAGDE,EAAcR,EAAAA,KAAaC,MAAM,CAC5CpB,MAAOmB,EAAAA,KAAanB,MAAM,uBAAuBuB,OAAOE,SAAS,YACjExB,SAAUkB,EAAAA,KAAaI,OAAOE,SAAS,cAG5BlB,EAAiBY,EAAAA,KAAaC,MAAM,CAC/CrB,KAAMoB,EAAAA,KAEHE,IAAI,EAAG,+BACPC,IAAI,GAAI,YACRC,OACAE,SAAS,YACZzB,MAAOmB,EAAAA,KAAanB,MAAM,uBAAuBuB,OAAOE,SAAS,YACjExB,SAAUkB,EAAAA,KAEPE,IAAI,EAAG,+BACPE,OACAE,SAAS,a","sources":["components/RegisterForm/RegisterForm.js","pages/RegisterPage.js","validation/formRegex.js","validation/schema.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { registerSchema } from 'validation/schema';\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (userData, { resetForm }) => {\n    dispatch(register(userData));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={registerSchema}\n    >\n      <Form style={{ display: 'flex', flexDirection: 'column' }}>\n        <label>\n          Username\n          <Field type=\"text\" name=\"name\" />\n        </label>\n        <ErrorMessage name=\"name\" component=\"p\" />\n        <label>\n          Email\n          <Field type=\"email\" name=\"email\" />\n        </label>\n        <ErrorMessage name=\"email\" component=\"p\" />\n        <label>\n          Password\n          <Field type=\"password\" name=\"password\" />\n        </label>\n        <ErrorMessage name=\"password\" component=\"p\" />\n        <button type=\"submit\" style={{ margin: '0 auto' }}>\n          Sign up\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Link } from 'react-router-dom';\n\nexport default function RegisterPage() {\n  return (\n    <div>\n      <Helmet>\n        <title>Sign up</title>\n      </Helmet>\n      <RegisterForm />\n      <p>Already have an account?</p>\n      <Link to=\"/login\">Log in</Link>\n    </div>\n  );\n}\n","export const regex = {\n  name: {\n    regex: /^[a-zA-Zа-яА-Я.]+(([' -][a-zA-Zа-яА-Я. ])?[a-zA-Zа-яА-Я.]*)*$/,\n    errorMessage:\n      \"Name may contain only letters, apostrophe, dash, dot and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  },\n  number: {\n    regex:\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n    errorMessage:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n  },\n};\n","import * as yup from 'yup';\nimport { regex } from './formRegex';\n\nexport const contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Enter at least 3 characters')\n    .max(30, 'Too Long')\n    .trim()\n    .matches(regex.name.regex, regex.name.errorMessage)\n    .required('Required'),\n  number: yup\n    .string()\n    .min(6, 'Enter at least 6 characters')\n    .max(20, 'Too Long')\n    .trim()\n    .matches(regex.number.regex, regex.number.errorMessage)\n    .required('Required'),\n});\n\nexport const logInSchema = yup.object().shape({\n  email: yup.string().email('Enter a valid email').trim().required('Required'),\n  password: yup.string().trim().required('Required'),\n});\n\nexport const registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Enter at least 3 characters')\n    .max(25, 'Too Long')\n    .trim()\n    .required('Required'),\n  email: yup.string().email('Enter a valid email').trim().required('Required'),\n  password: yup\n    .string()\n    .min(7, 'Enter at least 7 characters')\n    .trim()\n    .required('Required'),\n});\n"],"names":["RegisterForm","dispatch","useDispatch","initialValues","name","email","password","onSubmit","userData","resetForm","register","validationSchema","registerSchema","style","display","flexDirection","type","component","margin","RegisterPage","to","regex","errorMessage","contactSchema","yup","shape","min","max","trim","matches","required","number","logInSchema"],"sourceRoot":""}