{"version":3,"file":"static/js/205.8f892f10.chunk.js","mappings":"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","sources":["components/Loader.js","redux/contacts/selectors.js","redux/filter/selectors.js","components/Forms/ContactForm.js","validation/checkExistingContact.js","components/Contacts/ContactFilter.js","components/Forms/EditForm.js","components/EditModal.js","components/Contacts/ContactListItem.js","components/Contacts/ContactList.js","components/SortingBar.js","components/Contacts/Contacts.js","pages/ContactsPage.js","validation/formRegex.js","validation/schema.js"],"sourcesContent":["import { Oval } from 'react-loader-spinner';\n\nexport function Loader({ size = 20 }) {\n  return (\n    <Oval\n      height={size}\n      width={size}\n      color=\"#1976d2\"\n      visible={true}\n      ariaLabel=\"oval-loading\"\n      secondaryColor=\"#ffffff\"\n      strokeWidth={5}\n      strokeWidthSecondary={5}\n    />\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsDeleting = state => state.contacts.isDeleting;\nexport const selectIsAdding = state => state.contacts.isAdding;\nexport const selectIsEditing = state => state.contacts.isEditing;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n","export const selectFilter = state => state.filter;\n","import { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsAdding } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nimport {\n  checkExistingName,\n  checkExistingNumber,\n} from 'validation/checkExistingContact';\n\nimport { contactSchema } from 'validation/schema';\nimport { Loader } from 'components/Loader';\n\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport PhoneAndroidRoundedIcon from '@mui/icons-material/PhoneAndroidRounded';\nimport PersonOutlineRoundedIcon from '@mui/icons-material/PersonOutlineRounded';\nimport { Typography } from '@mui/material';\n\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\n\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isAdding = useSelector(selectIsAdding);\n\n  const handleSubmit = (contact, { resetForm }) => {\n    const isNameExist = checkExistingName(contacts, contact);\n    const isNumberExist = checkExistingNumber(contacts, contact);\n\n    if (!isNameExist && !isNumberExist) {\n      dispatch(addContact(contact));\n      resetForm();\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: { name: '', number: '' },\n    validationSchema: contactSchema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Accordion>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography variant=\"h6\" sx={{ mb: 0 }}>\n          Add new contact\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Box\n          component=\"form\"\n          onSubmit={formik.handleSubmit}\n          sx={{\n            '& .MuiTextField-root': { width: '40ch' },\n          }}\n        >\n          <Stack\n            direction=\"column\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <TextField\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <PersonOutlineRoundedIcon />\n                  </InputAdornment>\n                ),\n              }}\n              required\n              type=\"text\"\n              id=\"name\"\n              label=\"Name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n            <TextField\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <PhoneAndroidRoundedIcon />\n                  </InputAdornment>\n                ),\n              }}\n              required\n              type=\"tel\"\n              id=\"number\"\n              label=\"Number\"\n              value={formik.values.number}\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              error={formik.touched.number && Boolean(formik.errors.number)}\n              helperText={formik.touched.number && formik.errors.number}\n            />\n            <Button variant=\"contained\" type=\"submit\">\n              {isAdding ? <Loader /> : 'Add contact'}\n            </Button>\n          </Stack>\n        </Box>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n","import toast from 'react-hot-toast';\n\nconst checkContactName = (contactList, name) => {\n  return contactList.find(\n    contact => contact.name.toLowerCase() === name.trim().toLowerCase()\n  );\n};\n\nconst checkContactNumber = (contactList, number) => {\n  const regex = /\\D/g;\n  return contactList.find(\n    contact =>\n      contact.number.replace(regex, '') === number.trim().replace(regex, '')\n  );\n};\n\nexport function checkExistingName(contactList, contact) {\n  const isNameInContactList = checkContactName(contactList, contact.name);\n\n  if (isNameInContactList) {\n    toast.error(`${contact.name} is already in contacts`);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function checkExistingNumber(contactList, contact) {\n  const isNumberInContactList = checkContactNumber(contactList, contact.number);\n  if (isNumberInContactList) {\n    toast.error(\n      `This number is already saved in contacts as ${isNumberInContactList.name}`\n    );\n    return true;\n  } else {\n    return false;\n  }\n}\n","import { useDispatch } from 'react-redux';\nimport { changeNameFilter } from 'redux/filter/slice';\n\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { InputAdornment, Stack, Typography } from '@mui/material';\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded';\n\nexport function ContactFilter() {\n  const dispatch = useDispatch();\n  return (\n    <Stack\n      direction=\"row\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      spacing={2}\n    >\n      <Typography variant=\"subtitle1\">Find contacts by name</Typography>\n      <Box\n        marginTop={4}\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { width: '30ch' },\n        }}\n      >\n        <TextField\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchRoundedIcon />\n              </InputAdornment>\n            ),\n          }}\n          type=\"text\"\n          name=\"filter\"\n          id=\"filter\"\n          variant=\"outlined\"\n          placeholder=\"Enter name...\"\n          onChange={e => {\n            dispatch(changeNameFilter(e.target.value));\n          }}\n        />\n      </Box>\n    </Stack>\n  );\n}\n","import { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport { contactSchema } from 'validation/schema';\n\nimport toast from 'react-hot-toast';\nimport { Box, Button, InputAdornment, Stack, TextField } from '@mui/material';\nimport PhoneAndroidRoundedIcon from '@mui/icons-material/PhoneAndroidRounded';\nimport PersonOutlineRoundedIcon from '@mui/icons-material/PersonOutlineRounded';\n\nexport function EditForm({ contact, onModalClose }) {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (editedContact, { resetForm }) => {\n    const isNotChanged =\n      editedContact.name === contact.name &&\n      editedContact.number === contact.number;\n\n    if (isNotChanged) {\n      toast.error('Please, change something...');\n      return;\n    }\n\n    const editData = { id: contact.id, ...editedContact };\n    dispatch(editContact(editData));\n    resetForm();\n    onModalClose();\n  };\n\n  const formik = useFormik({\n    initialValues: { name: contact.name, number: contact.number },\n    validationSchema: contactSchema,\n    onSubmit: handleSubmit,\n  });\n  return (\n    <Box\n      marginTop={4}\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        '& .MuiTextField-root': { width: '40ch' },\n      }}\n    >\n      <Stack\n        direction=\"column\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <TextField\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <PersonOutlineRoundedIcon />\n              </InputAdornment>\n            ),\n          }}\n          required\n          type=\"text\"\n          id=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <PhoneAndroidRoundedIcon />\n              </InputAdornment>\n            ),\n          }}\n          required\n          type=\"tel\"\n          id=\"number\"\n          label=\"Number\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <Button variant=\"contained\" type=\"submit\">\n          Edit\n        </Button>\n      </Stack>\n    </Box>\n  );\n}\n","import { EditForm } from 'components/Forms/EditForm';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport ArrowBackRoundedIcon from '@mui/icons-material/ArrowBackRounded';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport function EditModal({ onModalClose, contact, isModalOpen }) {\n  return (\n    <Modal\n      open={isModalOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={style}>\n        <Button type=\"button\" onClick={onModalClose} variant=\"text\">\n          <ArrowBackRoundedIcon sx={{ mr: '4px' }} /> Back\n        </Button>\n        <EditForm contact={contact} onModalClose={onModalClose} />\n      </Box>\n    </Modal>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsDeleting, selectIsEditing } from 'redux/contacts/selectors';\n\nimport EditRoundedIcon from '@mui/icons-material/EditRounded';\nimport DeleteOutlineRoundedIcon from '@mui/icons-material/DeleteOutlineRounded';\n\nimport { Loader } from 'components/Loader';\nimport { useState } from 'react';\nimport { EditModal } from 'components/EditModal';\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { ListItem } from '@mui/material';\n\nexport function ContactListItem(contact) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const dispatch = useDispatch();\n  const isEditing = useSelector(selectIsEditing);\n  const isDeleting = useSelector(selectIsDeleting);\n\n  const isDeletingItem = isDeleting.status && isDeleting.id === contact.id;\n  const isEditingItem = isEditing.status && isEditing.id === contact.id;\n\n  const handleModalOpen = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <ListItem\n      sx={{\n        pl: '0',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Card\n        sx={{\n          minWidth: 400,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n        }}\n      >\n        <CardContent>\n          <Typography variant=\"h6\" component=\"div\">\n            {contact.name}\n          </Typography>\n          <Typography color=\"text.secondary\">{contact.number}</Typography>\n        </CardContent>\n\n        <CardActions sx={{ justifyContent: 'center' }}>\n          <Button type=\"button\" onClick={handleModalOpen} variant=\"outlined\">\n            {isEditingItem ? <Loader /> : <EditRoundedIcon />}\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n            variant=\"outlined\"\n          >\n            {isDeletingItem ? <Loader /> : <DeleteOutlineRoundedIcon />}\n          </Button>\n        </CardActions>\n      </Card>\n\n      {isModalOpen && (\n        <EditModal\n          onModalClose={handleModalClose}\n          contact={contact}\n          isModalOpen={isModalOpen}\n        />\n      )}\n    </ListItem>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\n\nimport { ContactListItem } from 'components/Contacts/ContactListItem';\nimport { List, Typography } from '@mui/material';\n\nexport function ContactList() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return !visibleContacts.length && !isLoading ? (\n    <Typography variant=\"subtitle2\">No contacts found</Typography>\n  ) : (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n}\n","import { useDispatch } from 'react-redux';\nimport { sortAscName, sortDescName } from 'redux/contacts/slice';\nimport {\n  AiOutlineSortAscending,\n  AiOutlineSortDescending,\n} from 'react-icons/ai';\nimport { Button, Stack, Typography } from '@mui/material';\n\nexport function SortingBar() {\n  const dispatch = useDispatch();\n  return (\n    <Stack\n      direction=\"row\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      spacing={2}\n    >\n      <Typography variant=\"subtitle1\" align=\"center\">\n        Sort by name\n      </Typography>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Button\n          variant=\"contained\"\n          type=\"button\"\n          onClick={() => dispatch(sortAscName())}\n        >\n          <AiOutlineSortAscending size={20} />\n        </Button>\n        <Button\n          variant=\"contained\"\n          type=\"button\"\n          onClick={() => dispatch(sortDescName())}\n        >\n          <AiOutlineSortDescending size={20} />\n        </Button>\n      </Stack>\n    </Stack>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nimport { ContactFilter } from 'components/Contacts/ContactFilter';\nimport { ContactList } from 'components/Contacts/ContactList';\nimport { SortingBar } from 'components/SortingBar';\nimport { Loader } from 'components/Loader';\n\nimport { Typography } from '@mui/material';\n\nexport function Contacts() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactFilter />\n      <SortingBar />\n\n      {!contacts.length && !isLoading ? (\n        <Typography variant=\"subtitle2\" align=\"center\">\n          No contacts yet\n        </Typography>\n      ) : (\n        <ContactList />\n      )}\n\n      {isLoading && <Loader />}\n      {error && <Typography variant=\"subtitle2\">{error}</Typography>}\n    </>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\nimport { ContactForm } from 'components/Forms/ContactForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Container } from '@mui/material';\n\nexport default function ContactsPage() {\n  return (\n    <Container\n      sx={{\n        pt: '12px',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Contacts />\n    </Container>\n  );\n}\n","export const regex = {\n  name: {\n    regex: /^[a-zA-Zа-яА-Я.]+(([' -][a-zA-Zа-яА-Я. ])?[a-zA-Zа-яА-Я.]*)*$/,\n    errorMessage:\n      \"Name may contain only letters, apostrophe, dash, dot and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  },\n  number: {\n    regex:\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n    errorMessage:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n  },\n};\n","import * as yup from 'yup';\nimport { regex } from './formRegex';\n\nexport const contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Enter at least 3 characters')\n    .max(30, 'Too Long')\n    .trim()\n    .matches(regex.name.regex, regex.name.errorMessage)\n    .required('Required'),\n  number: yup\n    .string()\n    .min(6, 'Enter at least 6 characters')\n    .max(20, 'Too Long')\n    .trim()\n    .matches(regex.number.regex, regex.number.errorMessage)\n    .required('Required'),\n});\n\nexport const logInSchema = yup.object().shape({\n  email: yup.string().email('Enter a valid email').trim().required('Required'),\n  password: yup\n    .string()\n    .min(7, 'Password should be of minimum 7 characters length')\n    .trim()\n    .required('Required'),\n});\n\nexport const registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Enter at least 3 characters')\n    .max(25, 'Too Long')\n    .trim()\n    .required('Required'),\n  email: yup.string().email('Enter a valid email').trim().required('Required'),\n  password: yup\n    .string()\n    .min(7, 'Password should be of minimum 7 characters length')\n    .trim()\n    .required('Required'),\n});\n"],"names":["Loader","size","height","width","color","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectIsDeleting","isDeleting","selectIsAdding","isAdding","selectIsEditing","isEditing","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","number","validationSchema","contactSchema","onSubmit","resetForm","isNameExist","contactList","isNameInContactList","find","trim","checkContactName","toast","checkExistingName","isNumberExist","isNumberInContactList","regex","replace","checkContactNumber","checkExistingNumber","addContact","Accordion","AccordionSummary","expandIcon","ExpandMore","id","Typography","variant","sx","mb","AccordionDetails","Box","component","handleSubmit","Stack","direction","justifyContent","alignItems","spacing","TextField","InputProps","startAdornment","InputAdornment","position","PersonOutlineRounded","required","type","label","value","values","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","PhoneAndroidRounded","Button","ContactFilter","marginTop","endAdornment","SearchRounded","placeholder","e","changeNameFilter","target","EditForm","onModalClose","editedContact","editData","editContact","style","top","left","transform","bgcolor","border","boxShadow","p","EditModal","isModalOpen","Modal","open","onClose","onClick","ArrowBackRounded","mr","ContactListItem","useState","setIsModalOpen","isDeletingItem","status","isEditingItem","ListItem","pl","display","flexDirection","Card","minWidth","CardContent","CardActions","EditRounded","deleteContact","DeleteOutlineRounded","ContactList","visibleContacts","length","List","map","SortingBar","align","sortAscName","sortDescName","Contacts","useEffect","fetchContacts","ContactsPage","Container","pt","gap","errorMessage","yup","shape","min","max","matches","logInSchema","email","password","registerSchema"],"sourceRoot":""}